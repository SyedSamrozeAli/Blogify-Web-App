import mongoose from "mongoose";
import { createHmac, randomBytes } from "crypto";

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  username: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  salt: {
    type: String,
  },
  password: {
    type: String,
    required: true,
  },
  blogs: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "blog",
    },
  ],

  myComments: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "comments",
    },
  ],

  profileImageURL: {
    type: String,
    default: '/uploads/profile-images/default.png'
  },

  followers: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "user",
    },
  ],

  following: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "user",
    },
  ],

}, { timestamps: true });

userSchema.pre("save", function (next) {
  const user = this;

  if (!user.isModified("password")) {
    return next();
  }

  const salt = randomBytes(16).toString("hex");
  const hashPassword = createHmac("sha256", salt)
    .update(user.password)
    .digest("hex");

  this.salt = salt;
  this.password = hashPassword;

  next();
});

userSchema.static("matchPassword", async function (email, password) {
  const user = await this.findOne({ email });
  if (!user) return false;

  const salt = user.salt;
  const hashPassword = user.password;

  // generate the password using the salt of the given user
  const userProvidedHash = createHmac("sha256", salt)
    .update(password)
    .digest("hex");

  //we now match the password in the database with the password generated by the user's salt
  if (hashPassword != userProvidedHash) return null;

  return { ...user._doc, password: undefined, salt: undefined };
});
const userModel = mongoose.model("user", userSchema);

export default userModel;
